"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ "–ú–∞—Ñ–∏–æ–∑–Ω–æ–µ –ö–∞–∑–∏–Ω–æ"
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
"""

import logging
import asyncio
import signal
import sys
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultArticle, InputTextMessageContent, InlineQueryResultPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, InlineQueryHandler
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏

import config
from mongo_database import MongoDB
from games import casino_games
from crime_system import crime_system
from keyboards import keyboards
from translations import get_text
from config import SHOP_ITEMS, ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('mafia_casino_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

db = MongoDB(config.MONGO_URL)

class MafiaCasinoBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO,
            handlers=[
                logging.FileHandler('mafia_casino_bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        save_games()
        sys.exit(0)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        self.application.add_handler(CommandHandler("casino", self.casino_command))
        self.application.add_handler(CommandHandler("crime", self.crime_command))
        self.application.add_handler(CommandHandler("gang", self.gang_command))
        self.application.add_handler(CommandHandler("top", self.top_command))
        self.application.add_handler(CommandHandler("daily_bonus", self.daily_bonus_command))
        self.application.add_handler(CommandHandler("rank", self.rank_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("broadcast", self.broadcast_command))
        self.application.add_handler(CommandHandler("ban", self.ban_command))
        self.application.add_handler(CommandHandler("unban", self.unban_command))
        self.application.add_handler(CommandHandler("addmoney", self.addmoney_command))
        self.application.add_handler(CommandHandler("removemoney", self.removemoney_command))
        self.application.add_handler(CommandHandler("setrank", self.setrank_command))
        self.application.add_handler(CommandHandler("userstats", self.userstats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_data = await db.get_user(user.id)
        
        if not user_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await db.create_user(user.id, user.username or "Unknown", user.first_name)
            
            welcome_text = get_text("welcome_new", name=user.first_name, money=user_data['money'], rank=user_data['rank'])
        else:
            welcome_text = get_text("welcome_return", name=user.first_name, money=user_data['money'], rank=user_data['rank'])
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboards.main_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        await self.show_profile(update, context, user_data)
    
    async def casino_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /casino"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        await update.message.reply_text(
            get_text("casino_title"),
            reply_markup=keyboards.casino_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def crime_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crime"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        await update.message.reply_text(
            get_text("crime_title"),
            reply_markup=keyboards.crime_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def gang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gang"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        await update.message.reply_text(
            "üë• **‘Ω’¥’¢’•÷Ä** üë•\n\n‘Ω’¥’¢’´ ’Ø’°’º’°’æ’°÷Ä’∏÷Ç’¥’ù",
            reply_markup=keyboards.gang_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
        await update.message.reply_text(
            get_text("top_title"),
            reply_markup=keyboards.top_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
{get_text("help_title")}

{get_text("help_commands")}
{get_text("help_start")}
{get_text("help_profile")}
{get_text("help_casino")}
{get_text("help_crime")}
{get_text("help_gang")}
{get_text("help_top")}
{get_text("help_help")}

{get_text("help_games")}
{get_text("help_slots")}
{get_text("help_roulette")}
{get_text("help_blackjack")}
{get_text("help_dice")}
{get_text("help_poker")}

{get_text("help_crimes")}
{get_text("help_pickpocket")}
{get_text("help_robbery")}
{get_text("help_smuggling")}
{get_text("help_bank")}

{get_text("help_territories")}
{get_text("help_territories_desc")}
{get_text("help_income")}
{get_text("help_protect")}

{get_text("help_gangs")}
{get_text("help_gangs_desc")}
{get_text("help_common")}
{get_text("help_wars")}

{get_text("help_shop")}
{get_text("help_weapons")}
{get_text("help_armor")}
{get_text("help_connections")}

{get_text("help_economy")}
{get_text("help_earn")}
{get_text("help_spend")}
{get_text("help_ranks")}

{get_text("help_ranks_list")}

{get_text("help_daily")}

{get_text("help_good_luck")}
        """
        
        await update.message.reply_text(
            help_text,
            reply_markup=keyboards.back_button("main_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback'–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        callback_data = query.data
        
        try:
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if callback_data == "main_menu":
                await self.show_main_menu(query)
            elif callback_data == "profile":
                await self.show_profile(update, context, user_data, query)
            elif callback_data == "profile_stats":
                await self.show_profile_stats(query, user_data)
            elif callback_data == "profile_achievements":
                await self.show_profile_achievements(query, user_data)
            elif callback_data == "shop_menu":
                await self.show_shop_menu(query)
            elif callback_data == "crime_menu":
                await self.show_crime_menu(query)
            elif callback_data == "casino_menu":
                await self.show_casino_menu(query)
            elif callback_data == "poker_menu":
                await self.show_poker_menu(query, user_data)
            elif callback_data == "casino_stats":
                await self.show_casino_stats(query, user_data)
            elif callback_data == "territories":
                await self.show_territories_menu(query)
            elif callback_data == "gang":
                await self.show_gang_menu(query, user_data)
            elif callback_data == "group":
                await self.show_group_menu(query, user_data)
            
            # –ö–∞–∑–∏–Ω–æ
            elif callback_data.startswith("slots_"):
                await self.handle_slots(query, user_data, callback_data)
            elif callback_data.startswith("roulette_"):
                await self.handle_roulette(query, user_data, callback_data, context)
            elif callback_data.startswith("blackjack_"):
                await self.handle_blackjack(query, user_data, callback_data, context)
            elif callback_data.startswith("dice_"):
                await self.handle_dice(query, user_data, callback_data, context)
            
            # –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            elif callback_data.startswith("crime_"):
                await self.handle_crime(query, user_data, callback_data)
            
            # –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
            elif callback_data == "territories_menu":
                await self.show_territories_menu(query)
            elif callback_data.startswith("buy_territory"):
                await self.handle_buy_territory(query, user_data, callback_data)
            elif callback_data == "collect_income":
                await self.handle_collect_income(query, user_data)
            elif callback_data == "my_territories":
                await self.show_my_territories(query, user_data)
            
            # –ú–∞–≥–∞–∑–∏–Ω
            elif callback_data.startswith("buy_"):
                await self.handle_shop(query, user_data, callback_data)
            
            # –ë–∞–Ω–¥–∞
            elif callback_data.startswith("gang_"):
                await self.handle_gang(query, user_data, callback_data)
            
            # –ì—Ä—É–ø–ø–∞
            elif callback_data.startswith("group_"):
                await self.handle_group(query, user_data, callback_data)
            
            elif callback_data == "daily_bonus":
                await self.handle_daily_bonus(query, user_data)
            elif callback_data == "help":
                await self.show_help(query)
            elif callback_data == "gang_menu":
                await self.show_gang_menu(query)
            elif callback_data == "escape":
                await self.handle_escape(query, user_data)
            elif callback_data == "top_menu":
                await self.show_top_menu(query)
            elif callback_data.startswith("top_"):
                await self.handle_top(query, callback_data)
            
            else:
                await query.edit_message_text("‚ùå ‘±’∂’∞’°’µ’ø ’∞÷Ä’°’¥’°’∂")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback {callback_data}: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n{e}")
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            get_text("main_menu"),
            reply_markup=keyboards.main_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def show_profile(self, update, context, user_data, query=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ç—é—Ä—å–º–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        jail_status = ""
        if user_data.get("jail_time"):
            jail_end = datetime.fromisoformat(user_data["jail_time"])
            if jail_end > datetime.now():
                remaining = jail_end - datetime.now()
                minutes = int(remaining.total_seconds() / 60)
                jail_status = f"\nüöî **–í —Ç—é—Ä—å–º–µ:** {minutes} –º–∏–Ω—É—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –±–∞–Ω–¥–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        gang_status = ""
        if user_data.get("gang"):
            gang_status = f"\nüë• **–ë–∞–Ω–¥–∞:** {user_data['gang']['name']} ({user_data['gang']['role']})"
        
        profile_text = f"""
{get_text("profile_title")}

{get_text("profile_name", name=user_data.get('name') or user_data.get('first_name') or user_data.get('username') or '–ë–µ–∑ –∏–º–µ–Ω–∏')}
{get_text("profile_balance", money=user_data['money'])}
{get_text("profile_rank", rank=user_data['rank'])}

{get_text("profile_reputation")}
{get_text("profile_cops", cops=user_data['reputation']['–∫–æ–ø—ã'])}
{get_text("profile_mafia", mafia=user_data['reputation']['–º–∞—Ñ–∏—è'])}
{get_text("profile_citizens", citizens=user_data['reputation']['–≥—Ä–∞–∂–¥–∞–Ω–µ'])}

{get_text("profile_territories", count=len(user_data['territories']))}
{get_text("profile_inventory", count=len(user_data['inventory']))}{gang_status}{jail_status}
        """
        
        if query:
            await query.edit_message_text(
                profile_text,
                reply_markup=keyboards.profile_actions(),
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                profile_text,
                reply_markup=keyboards.profile_actions(),
                parse_mode=ParseMode.HTML
            )
    
    async def handle_daily_bonus(self, query, user_data):
        from datetime import datetime, timedelta
        BONUS_AMOUNT = 1000
        BONUS_COOLDOWN = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        now = datetime.now()
        last_time_str = user_data.get("daily_bonus_time")
        if last_time_str:
            last_time = datetime.fromisoformat(last_time_str)
            elapsed = (now - last_time).total_seconds()
            if elapsed < BONUS_COOLDOWN:
                remaining = BONUS_COOLDOWN - elapsed
                hours = int(remaining // 3600)
                minutes = int((remaining % 3600) // 60)
                await query.edit_message_text(
                    f"‚è∞ ’ï÷Ä’°’Ø’°’∂ ’¢’∏’∂’∏÷Ç’Ω’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’´ {hours} ’™ {minutes} ÷Ä ’∞’•’ø’∏!",
                    reply_markup=keyboards.back_button("main_menu")
                )
                return
        # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
        new_money = user_data["money"] + BONUS_AMOUNT
        await db.update_user(query.from_user.id, {"money": new_money, "daily_bonus_time": now.isoformat()})
        await query.edit_message_text(
            f"üéÅ ‘¥’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ {BONUS_AMOUNT} ’¥’•’ø’°’≤’°’§÷Ä’°’¥ ÷Ö÷Ä’°’Ø’°’∂ ’¢’∏’∂’∏÷Ç’Ω!\nüí≥ ’Ü’∏÷Ä ’∞’°’∑’æ’•’Ø’∑’´’º: {new_money} ’¥’•’ø’°’≤’°’§÷Ä’°’¥",
            reply_markup=keyboards.back_button("main_menu")
        )
    
    async def show_casino_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ"""
        await query.edit_message_text(
            get_text("casino_title"),
            reply_markup=keyboards.casino_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def show_poker_menu(self, query, user_data):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∫–µ—Ä–∞"""
        await query.edit_message_text(
            "‚ô†Ô∏è **’ä’∏’Ø’•÷Ä**\n\n‘±’µ’Ω ’≠’°’≤’® ’∑’∏÷Ç’ø’∏’æ ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’´!",
            reply_markup=keyboards.back_button("casino_menu"),
            parse_mode=ParseMode.HTML
        )

    async def show_casino_stats(self, query, user_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∑–∏–Ω–æ-–∏–≥—Ä–∞–º"""
        stats = user_data.get("statistics", {})
        text = f"""
üìä **‘ø’°’¶’´’∂’∏’µ’´ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂**

üé∞ ’ç’¨’∏’ø’•÷Ä: {stats.get('slots_played', 0)} ’≠’°’≤
üé≤ ’å’∏÷Ç’¨’•’ø’Ø’°: {stats.get('roulette_played', 0)} ’≠’°’≤
üÉè ‘≤’¨’•÷Ñ’ª’•÷Ñ: {stats.get('blackjack_played', 0)} ’≠’°’≤
üé≤ ‘∂’°’º’•÷Ä: {stats.get('dice_played', 0)} ’≠’°’≤
‚ô†Ô∏è ’ä’∏’Ø’•÷Ä: {stats.get('poker_played', 0)} ’≠’°’≤
"""
        await query.edit_message_text(
            text,
            reply_markup=keyboards.back_button("casino_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_slots(self, query, user_data, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ—Ç–æ–≤"""
        if callback_data == "slots_menu":
            await query.edit_message_text(
                get_text("slots_title"),
                reply_markup=keyboards.slots_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞–≤–∫—É
        bet = int(callback_data.split("_")[1])
        
        if user_data["money"] < bet:
            await query.edit_message_text(
                get_text("not_enough_money", amount=bet),
                reply_markup=keyboards.back_button("slots_menu"),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ò–≥—Ä–∞–µ–º –≤ —Å–ª–æ—Ç—ã
        result = casino_games.play_slots(bet)
        
        if result["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
            new_money = user_data["money"] - bet + result["win_amount"]
            stats = user_data.get("statistics", {})
            stats["slots_played"] = stats.get("slots_played", 0) + 1
            await db.update_user(query.from_user.id, {"money": new_money, "statistics": stats})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = get_text("slots_result", 
                                 result=' '.join(result['result']), 
                                 message=result['message'],
                                 bet=bet, 
                                 balance=new_money)
            
            await query.edit_message_text(
                result_text,
                reply_markup=keyboards.back_button("slots_menu"),
                parse_mode=ParseMode.HTML
            )
    
    async def handle_roulette(self, query, user_data, callback_data, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É–ª–µ—Ç–∫–∏"""
        if callback_data == "roulette_menu":
            await query.edit_message_text(
                get_text("roulette_title"),
                reply_markup=keyboards.roulette_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫
        if callback_data in ["roulette_red", "roulette_black", "roulette_even", "roulette_odd"]:
            bet_type = callback_data.split("_")[1]
            bet_value = {"red": "’Ø’°÷Ä’¥’´÷Ä", "black": "’Ω÷á", "even": "’¶’∏÷Ç’µ’£", "odd": "’Ø’•’∂’ø"}[bet_type]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["roulette_bet"] = {"type": "color" if bet_type in ["red", "black"] else "even_odd", "value": bet_value}
            
            await query.edit_message_text(
                f"üé≤ **’å’∏÷Ç’¨’•’ø’Ø’°** üé≤\n\n‘≥÷Ä’°’æ’°’§÷Ä’∏÷Ç’¥: {bet_value}\n‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ç’¥’°÷Ä’®’ù",
                reply_markup=keyboards.roulette_bet_amounts(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ù–æ–≤—ã–π –±–ª–æ–∫: –≤—ã–±–æ—Ä —á–∏—Å–ª–∞
        if callback_data == "roulette_number":
            await query.edit_message_text(
                "üéØ ‘∏’∂’ø÷Ä’•÷Ñ ’©’´’æ’® (0-36):",
                reply_markup=keyboards.number_keyboard(36, "roulette_pick_number"),
                parse_mode=ParseMode.HTML
            )
            return
        
        if callback_data.startswith("roulette_pick_number_"):
            number = int(callback_data.split("_")[-1])
            context.user_data["roulette_bet"] = {"type": "number", "value": str(number)}
            await query.edit_message_text(
                f"üé≤ **’å’∏÷Ç’¨’•’ø’Ø’°** üé≤\n\n‘≥÷Ä’°’æ’°’§÷Ä’∏÷Ç’¥: ’©’´’æ {number}\n‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ç’¥’°÷Ä’®’ù",
                reply_markup=keyboards.roulette_bet_amounts(),
                parse_mode=ParseMode.HTML
            )
            return
        
        if callback_data.startswith("roulette_bet_"):
            bet_amount = int(callback_data.split("_")[2])
            
            if user_data["money"] < bet_amount:
                await query.edit_message_text(
                    get_text("not_enough_money", amount=bet_amount),
                    reply_markup=keyboards.back_button("roulette_menu"),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
            roulette_bet = context.user_data.get("roulette_bet", {})
            if not roulette_bet:
                await query.edit_message_text(
                    "‚ùå ’ç’≠’°’¨! ‘∏’∂’ø÷Ä’•÷Ñ ’£÷Ä’°’æ’°’§÷Ä’¥’°’∂ ’ø’•’Ω’°’Ø’® ’Ø÷Ä’Ø’´’∂",
                    reply_markup=keyboards.roulette_menu(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ò–≥—Ä–∞–µ–º –≤ —Ä—É–ª–µ—Ç–∫—É
            result = casino_games.play_roulette(
                roulette_bet["type"], 
                roulette_bet["value"], 
                bet_amount
            )
            
            if result["success"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
                new_money = user_data["money"] - bet_amount + result["win_amount"]
                stats = user_data.get("statistics", {})
                stats["roulette_played"] = stats.get("roulette_played", 0) + 1
                await db.update_user(query.from_user.id, {"money": new_money, "statistics": stats})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = get_text("roulette_result",
                                     number=result['number'],
                                     color=result['color'],
                                     message=result['message'],
                                     bet=bet_amount,
                                     balance=new_money)
                
                await query.edit_message_text(
                    result_text,
                    reply_markup=keyboards.back_button("roulette_menu"),
                    parse_mode=ParseMode.HTML
                )
    
    async def handle_blackjack(self, query, user_data, callback_data, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª—ç–∫–¥–∂–µ–∫–∞"""
        if callback_data == "blackjack_menu":
            await query.edit_message_text(
                get_text("blackjack_title"),
                reply_markup=keyboards.blackjack_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–µ—Ä–≤—ã–π —Ö–æ–¥: –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏
        if callback_data.startswith("blackjack_") and callback_data.split("_")[1].isdigit():
            bet = int(callback_data.split("_")[1])
            if user_data["money"] < bet:
                await query.edit_message_text(
                    get_text("not_enough_money", amount=bet),
                    reply_markup=keyboards.back_button("blackjack_menu"),
                    parse_mode=ParseMode.HTML
                )
                return
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ context
            context.user_data["blackjack_bet"] = bet
            # –ò–≥—Ä–∞–µ–º –≤ –±–ª—ç–∫–¥–∂–µ–∫
            result = casino_games.play_blackjack(bet)
            if result["success"]:
                new_money = user_data["money"] - bet + result.get("win_amount", 0)
                stats = user_data.get("statistics", {})
                stats["blackjack_played"] = stats.get("blackjack_played", 0) + 1
                await db.update_user(query.from_user.id, {"money": new_money, "statistics": stats})
                player_score = casino_games.calculate_blackjack_score(result["player_cards"])
                result_text = f"""
üÉè **‘≤’¨’•÷Ñ’ª’•÷Ñ** üÉè

üéØ ’Å’•÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['player_cards'])}
üìä ’Å’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®: {player_score}

üé∞ ‘¥’´’¨’•÷Ä’´ ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['dealer_visible'])}

‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®’ù
                """
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—ã –≤ context
                context.user_data["blackjack_player_cards"] = result["player_cards"]
                context.user_data["blackjack_dealer_cards"] = result["dealer_cards"]
                await query.edit_message_text(
                    result_text,
                    reply_markup=keyboards.blackjack_game(),
                    parse_mode=ParseMode.HTML
                )
            return
        
        # –•–æ–¥: –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É
        if callback_data == "blackjack_hit":
            bet = context.user_data.get("blackjack_bet", 0)
            player_cards = context.user_data.get("blackjack_player_cards", [])
            dealer_cards = context.user_data.get("blackjack_dealer_cards", [])
            result = casino_games.blackjack_hit(player_cards, dealer_cards, bet)
            player_score = casino_games.calculate_blackjack_score(result["player_cards"])
            if result["game_state"] == "bust":
                # –ü—Ä–æ–∏–≥—Ä—ã—à
                result_text = f"üí• **’ì’∏’≠’°’∂÷Å’∏÷Ç’¥** üí•\n\nüéØ ’Å’•÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['player_cards'])}\nüìä ’Å’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®: {player_score}\n\n‘¥’∏÷Ç÷Ñ ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ!"
                await query.edit_message_text(
                    result_text,
                    reply_markup=keyboards.back_button("blackjack_menu"),
                    parse_mode=ParseMode.HTML
                )
                return
            # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            context.user_data["blackjack_player_cards"] = result["player_cards"]
            context.user_data["blackjack_dealer_cards"] = result["dealer_cards"]
            result_text = f"üÉè **‘≤’¨’•÷Ñ’ª’•÷Ñ** üÉè\n\nüéØ ’Å’•÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['player_cards'])}\nüìä ’Å’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®: {player_score}\n\nüé∞ ‘¥’´’¨’•÷Ä’´ ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(['üÇ†' if i > 0 else c for i, c in enumerate(result['dealer_cards'])])}\n\n‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®’ù"
            await query.edit_message_text(
                result_text,
                reply_markup=keyboards.blackjack_game(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –•–æ–¥: —Ö–≤–∞—Ç–∏—Ç
        if callback_data == "blackjack_stand":
            bet = context.user_data.get("blackjack_bet", 0)
            player_cards = context.user_data.get("blackjack_player_cards", [])
            dealer_cards = context.user_data.get("blackjack_dealer_cards", [])
            result = casino_games.blackjack_stand(player_cards, dealer_cards, bet)
            player_score = casino_games.calculate_blackjack_score(result["player_cards"])
            dealer_score = casino_games.calculate_blackjack_score(result["dealer_cards"])
            result_text = f"üÉè **‘≤’¨’•÷Ñ’ª’•÷Ñ** üÉè\n\nüéØ ’Å’•÷Ä ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['player_cards'])}\nüìä ’Å’•÷Ä ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®: {player_score}\n\nüé∞ ‘¥’´’¨’•÷Ä’´ ÷Ñ’°÷Ä’ø’•÷Ä’®: {' '.join(result['dealer_cards'])}\nüìä ‘¥’´’¨’•÷Ä’´ ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®: {dealer_score}\n\n{result['message']}"
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
            new_money = user_data["money"] + result.get("win_amount", 0)
            stats = user_data.get("statistics", {})
            stats["blackjack_played"] = stats.get("blackjack_played", 0) + 1
            await db.update_user(query.from_user.id, {"money": new_money, "statistics": stats})
            await query.edit_message_text(
                result_text,
                reply_markup=keyboards.back_button("blackjack_menu"),
                parse_mode=ParseMode.HTML
            )
            return
    
    async def handle_dice(self, query, user_data, callback_data, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Å—Ç–µ–π"""
        if callback_data == "dice_menu":
            await query.edit_message_text(
                get_text("dice_title"),
                reply_markup=keyboards.dice_menu(),
                parse_mode=ParseMode.HTML
            )
            return
        
        if callback_data.startswith("dice_") and not callback_data.startswith("dice_pred_"):
            bet = int(callback_data.split("_")[1])
            
            if user_data["money"] < bet:
                await query.edit_message_text(
                    get_text("not_enough_money", amount=bet),
                    reply_markup=keyboards.back_button("dice_menu"),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É
            context.user_data["dice_bet"] = bet
            
            await query.edit_message_text(
                f"üé≤ **‘∂’°’º’•÷Ä** üé≤\n\n‘≥÷Ä’°’æ’°’§÷Ä’∏÷Ç’¥: {bet} ’¥’•’ø’°’≤’°’§÷Ä’°’¥\n‘≥’∏÷Ç’∑’°’Ø’•÷Ñ ’•÷Ä’Ø’∏÷Ç ’¶’°’º’•÷Ä’´ ’£’∏÷Ç’¥’°÷Ä’®’ù",
                reply_markup=keyboards.dice_predictions(),
                parse_mode=ParseMode.HTML
            )
            return
        
        if callback_data.startswith("dice_pred_"):
            prediction = int(callback_data.split("_")[2])
            bet = context.user_data.get("dice_bet", 0)
            
            if bet == 0:
                await query.edit_message_text(
                    "‚ùå ’ç’≠’°’¨! ‘∏’∂’ø÷Ä’•÷Ñ ’£÷Ä’°’æ’°’§÷Ä’∏÷Ç’¥’® ’Ø÷Ä’Ø’´’∂",
                    reply_markup=keyboards.dice_menu(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ò–≥—Ä–∞–µ–º –≤ –∫–æ—Å—Ç–∏
            result = casino_games.play_dice(bet, prediction)
            
            if result["success"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
                new_money = user_data["money"] - bet + result["win_amount"]
                stats = user_data.get("statistics", {})
                stats["dice_played"] = stats.get("dice_played", 0) + 1
                await db.update_user(query.from_user.id, {"money": new_money, "statistics": stats})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = get_text("dice_result",
                                     prediction=prediction,
                                     dice1=result['dice'][0],
                                     dice2=result['dice'][1],
                                     total=result['total'],
                                     message=result['message'],
                                     bet=bet,
                                     balance=new_money)
                
                await query.edit_message_text(
                    result_text,
                    reply_markup=keyboards.back_button("dice_menu"),
                    parse_mode=ParseMode.HTML
                )
    
    async def show_crime_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
        await query.edit_message_text(
            get_text("crime_title"),
            reply_markup=keyboards.crime_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_crime(self, query, user_data, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
        crime_type = callback_data.split("_")[1]
        crime_names = {
            "pickpocket": get_text("crime_pickpocket"),
            "robbery": get_text("crime_robbery"),
            "smuggling": get_text("crime_smuggling"),
            "bank": get_text("crime_bank")
        }
        
        crime_name = crime_names.get(crime_type)
        if not crime_name:
            await query.edit_message_text("‚ùå ‘±’∂’∞’°’µ’ø ’∞’°’∂÷Å’°’£’∏÷Ä’Æ’∏÷Ç’©’µ’∏÷Ç’∂")
            return
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        result = crime_system.commit_crime(query.from_user.id, crime_name, user_data)
        
        if result["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updates = {
                "money": result.get("new_money", user_data["money"]),
                "reputation": result.get("new_reputation", user_data["reputation"]),
                "statistics": result.get("new_stats", user_data["statistics"]),
                "last_crime_time": datetime.now().isoformat()
            }
            
            if result.get("jail_time"):
                updates["jail_time"] = result["jail_time"]
                updates["jail_start"] = datetime.now().isoformat()
            
            await db.update_user(query.from_user.id, updates)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                f"üî´ **{crime_name.title()}** üî´\n\n{result['message']}",
                reply_markup=keyboards.back_button("crime_menu"),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                f"‚ùå {result['message']}",
                reply_markup=keyboards.back_button("crime_menu"),
                parse_mode=ParseMode.HTML
            )
    
    async def show_territories_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"""
        await query.edit_message_text(
            get_text("territories_title"),
            reply_markup=keyboards.territories_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_buy_territory(self, query, user_data, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"""
        if callback_data == "buy_territory":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
            available = crime_system.get_available_territories(user_data)
            
            if not available:
                await query.edit_message_text(
                    "‚ùå ‘≥’∂’¥’°’∂ ’∞’°’¥’°÷Ä ’∞’°’Ω’°’∂’•’¨’´ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä ’π’Ø’°’∂",
                    reply_markup=keyboards.back_button("territories_menu"),
                    parse_mode=ParseMode.HTML
                )
                return
            
            await query.edit_message_text(
                "üèòÔ∏è **’Ä’°’Ω’°’∂’•’¨’´ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä** üèòÔ∏è\n\n‘∏’∂’ø÷Ä’•÷Ñ ’£’∂’¥’°’∂ ’∞’°’¥’°÷Ä’ù",
                reply_markup=keyboards.available_territories(available),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–∫—É–ø–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
        territory_name = callback_data.split("_", 2)[2]
        result = crime_system.buy_territory(query.from_user.id, territory_name, user_data)
        
        if result["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.update_user(query.from_user.id, {
                "money": result["new_money"],
                "territories": result["new_territories"]
            })
            
            await query.edit_message_text(
                get_text("territory_bought", message=result['message']),
                reply_markup=keyboards.back_button("territories_menu"),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                f"‚ùå {result['message']}",
                reply_markup=keyboards.back_button("territories_menu"),
                parse_mode=ParseMode.HTML
            )
    
    async def handle_collect_income(self, query, user_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"""
        result = crime_system.collect_territory_income(query.from_user.id, user_data)
        
        if result["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updates = {
                "money": result["new_money"],
                "last_territory_income": datetime.now().isoformat()
            }
            
            await db.update_user(query.from_user.id, updates)
            
            await query.edit_message_text(
                get_text("income_collected", message=result['message']),
                reply_markup=keyboards.back_button("territories_menu"),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                f"‚ùå {result['message']}",
                reply_markup=keyboards.back_button("territories_menu"),
                parse_mode=ParseMode.HTML
            )
    
    async def show_gang_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–Ω–¥—ã"""
        await query.edit_message_text(
            "üë• **‘Ω’¥’¢’•÷Ä** üë•\n\n‘Ω’¥’¢’´ ’Ø’°’º’°’æ’°÷Ä’∏÷Ç’¥’ù",
            reply_markup=keyboards.gang_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_gang(self, query, user_data, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–Ω–¥–æ–π"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–Ω–¥–æ–π
        await query.edit_message_text(
            "üë• **‘Ω’¥’¢’•÷Ä** üë•\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
            reply_markup=keyboards.back_button("gang_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def show_shop_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
        await query.edit_message_text(
            get_text("shop_title"),
            reply_markup=keyboards.shop_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_shop(self, query, user_data, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
        item_name = callback_data.split("_", 1)[1]
        item_info = SHOP_ITEMS.get(item_name)
        
        if not item_info:
            await query.edit_message_text(
                "‚ùå ‘±’∂’∞’°’µ’ø ’°’º’°÷Ä’Ø’°",
                reply_markup=keyboards.back_button("shop_menu"),
                parse_mode=ParseMode.HTML
            )
            return
        
        if user_data["money"] < item_info["cost"]:
            await query.edit_message_text(
                get_text("not_enough_money", amount=item_info['cost']),
                reply_markup=keyboards.back_button("shop_menu"),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        new_money = user_data["money"] - item_info["cost"]
        new_inventory = user_data["inventory"] + [item_name]
        
        await db.update_user(query.from_user.id, {
            "money": new_money,
            "inventory": new_inventory
        })
        
        await query.edit_message_text(
            get_text("item_bought", item=item_name, cost=item_info['cost'], balance=new_money),
            reply_markup=keyboards.back_button("shop_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def show_top_menu(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        await query.edit_message_text(
            get_text("top_title"),
            reply_markup=keyboards.top_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_top(self, query, callback_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        top_type = callback_data.split("_")[1]
        top_users = await db.get_top_users(top_type, 10)
        
        if not top_users:
            await query.edit_message_text(
                "‚ùå ‘¥’°’Ω’°’Ø’°÷Ä’£’¥’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä ’π’Ø’°’∂",
                reply_markup=keyboards.back_button("top_menu"),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        if top_type == "money":
            top_text = get_text("top_money")
        elif top_type == "rank":
            top_text = get_text("top_rank")
        elif top_type == "reputation":
            top_text = get_text("top_reputation")
        else:
            top_text = get_text("top_territories")
        
        for i, user in enumerate(top_users, 1):
            if top_type == "money":
                value = f"{user['money']} ’¥’•’ø’°’≤’°’§÷Ä’°’¥"
            elif top_type == "rank":
                value = user['rank']
            elif top_type == "reputation":
                value = f"{sum(user['reputation'].values())} ’¥’´’°’æ’∏÷Ä"
            else:
                value = f"{len(user['territories'])} ’ø’°÷Ä’°’Æ÷Ñ"
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º user['name'] –∏–ª–∏ user['username'] –≤–º–µ—Å—Ç–æ user['first_name']
            display_name = user.get('name') or user.get('username') or '–ë–µ–∑ –∏–º–µ–Ω–∏'
            top_text += f"{i}. {display_name}: {value}\n"
        
        await query.edit_message_text(
            top_text,
            reply_markup=keyboards.back_button("top_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""
{get_text("help_title")}

{get_text("help_commands")}
{get_text("help_start")}
{get_text("help_profile")}
{get_text("help_casino")}
{get_text("help_crime")}
{get_text("help_gang")}
{get_text("help_top")}
{get_text("help_help")}

{get_text("help_games")}
{get_text("help_slots")}
{get_text("help_roulette")}
{get_text("help_blackjack")}
{get_text("help_dice")}
{get_text("help_poker")}

{get_text("help_crimes")}
{get_text("help_pickpocket")}
{get_text("help_robbery")}
{get_text("help_smuggling")}
{get_text("help_bank")}

{get_text("help_territories")}
{get_text("help_territories_desc")}
{get_text("help_income")}
{get_text("help_protect")}

{get_text("help_gangs")}
{get_text("help_gangs_desc")}
{get_text("help_common")}
{get_text("help_wars")}

{get_text("help_shop")}
{get_text("help_weapons")}
{get_text("help_armor")}
{get_text("help_connections")}

{get_text("help_economy")}
{get_text("help_earn")}
{get_text("help_spend")}
{get_text("help_ranks")}

{get_text("help_ranks_list")}

{get_text("help_daily")}

{get_text("help_good_luck")}
        """
        
        await query.edit_message_text(
            help_text,
            reply_markup=keyboards.back_button("main_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def handle_escape(self, query, user_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–±–µ–≥–∞ –∏–∑ —Ç—é—Ä—å–º—ã"""
        result = crime_system.organize_escape(query.from_user.id, user_data)
        
        if result["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updates = {}
            if "new_money" in result:
                updates["money"] = result["new_money"]
            if result.get("new_jail_time"):
                updates["jail_time"] = result["new_jail_time"]
            if result.get("escape_success"):
                updates["jail_time"] = 0
                updates["jail_start"] = None
            await db.update_user(query.from_user.id, updates)
            
            await query.edit_message_text(
                f"üèÉ‚Äç‚ôÇÔ∏è **’ì’°’≠’∏÷Ç’Ω’ø** üèÉ‚Äç‚ôÇÔ∏è\n\n{result['message']}",
                reply_markup=keyboards.back_button("main_menu"),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                f"‚ùå {result['message']}",
                reply_markup=keyboards.back_button("main_menu"),
                parse_mode=ParseMode.HTML
            )
    
    # –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def daily_bonus_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        current_time = datetime.now()
        
        if user_data.get("daily_bonus_time"):
            last_bonus = datetime.fromisoformat(user_data["daily_bonus_time"])
            time_diff = current_time - last_bonus
            
            if time_diff < timedelta(seconds=DAILY_BONUS_COOLDOWN):
                remaining = DAILY_BONUS_COOLDOWN - time_diff.seconds
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                
                await update.message.reply_text(
                    get_text("group_daily_wait", username=user.username or user.first_name, hours=hours, minutes=minutes),
                    parse_mode=ParseMode.HTML
                )
                return
        
        # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å
        new_money = user_data["money"] + DAILY_BONUS_AMOUNT
        await db.update_user(user.id, {
            "money": new_money,
            "daily_bonus_time": current_time.isoformat()
        })
        
        await update.message.reply_text(
            get_text("group_daily_received", username=user.username or user.first_name, amount=DAILY_BONUS_AMOUNT, balance=new_money),
            parse_mode=ParseMode.HTML
        )
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        rank = await db.get_user_rank(user.id)
        
        await update.message.reply_text(
            get_text("group_balance", username=user.username or user.first_name, money=user_data['money'], rank=rank),
            parse_mode=ParseMode.HTML
        )
    
    async def rank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        rank = await db.get_user_rank(user.id)
        total_reputation = sum(user_data["reputation"].values())
        
        await update.message.reply_text(
            get_text("group_rank", username=user.username or user.first_name, rank=rank, reputation=total_reputation, territories=len(user_data['territories'])),
            parse_mode=ParseMode.HTML
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø"""
        user = update.effective_user
        user_data = await db.get_user(user.id)
        
        if not user_data:
            await update.message.reply_text(get_text("not_registered"))
            return
        
        stats = user_data["statistics"]
        
        await update.message.reply_text(
            get_text("group_stats", username=user.username or user.first_name, games_played=stats['games_played'], games_won=stats['games_won'], crimes_committed=stats['crimes_committed'], crimes_successful=stats['crimes_successful'], money_earned=stats['money_earned'], money_lost=stats['money_lost']),
            parse_mode=ParseMode.HTML
        )
    
    async def show_my_territories(self, query, user_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user_data["territories"]:
            await query.edit_message_text(
                "‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä",
                reply_markup=keyboards.back_button("territories_menu"),
                parse_mode=ParseMode.HTML
            )
            return
        text = "üèòÔ∏è **’Å’•÷Ä ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’®** üèòÔ∏è\n\n"
        for t in user_data["territories"]:
            text += f"‚Ä¢ {t}\n"
        await query.edit_message_text(
            text,
            reply_markup=keyboards.back_button("territories_menu"),
            parse_mode=ParseMode.HTML
        )
    
    async def show_profile_stats(self, query, user_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        stats = user_data.get("statistics", {})
        text = f"""
üìä **’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂**

üé∞ ‘Ω’°’≤’•÷Ä: {stats.get('games_played', 0)}
üéâ ’Ä’°’≤’©’°’∂’°’Ø’∂’•÷Ä: {stats.get('games_won', 0)}
üî´ ’Ä’°’∂÷Å’°’£’∏÷Ä’Æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä: {stats.get('crimes_committed', 0)}
üí∞ ‘ø’∏’≤’∏’∫’∏÷Ç’ø’∂’•÷Ä: {stats.get('robberies', 0)}
        """
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô ’Ä’•’ø", callback_data="profile")]
            ]),
            parse_mode=ParseMode.HTML
        )
    
    async def show_profile_achievements(self, query, user_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        achievements = user_data.get("achievements", [])
        if not achievements:
            text = "üèÜ ‘¥’•’º÷á’Ω ’±’•’º÷Ñ’¢’•÷Ä’∏÷Ç’¥’∂’•÷Ä ’π’Ø’°’∂"
        else:
            text = "üèÜ **’Å’•’º÷Ñ’¢’•÷Ä’∏÷Ç’¥’∂’•÷Ä**\n\n" + "\n".join(f"‚Ä¢ {a}" for a in achievements)
        await query.edit_message_text(
            text,
            reply_markup=keyboards.back_button("profile"),
            parse_mode=ParseMode.HTML
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    async def is_admin(self, user_id):
        return user_id in ADMIN_IDS

    # –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        text = ' '.join(context.args)
        count = 0
        for user in await db.get_all_users():
            try:
                await context.bot.send_message(user['user_id'], text)
                count += 1
            except Exception:
                pass
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    # –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω
    async def ban_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        await db.update_user(user_id, {"banned": True})
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")

    async def unban_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        await db.update_user(user_id, {"banned": False})
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

    # –í—ã–¥–∞—Ç—å/–æ—Ç–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏
    async def addmoney_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        amount = int(context.args[1])
        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        new_money = user["money"] + amount
        await db.update_user(user_id, {"money": new_money})
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_money}")

    async def removemoney_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        amount = int(context.args[1])
        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        new_money = max(0, user["money"] - amount)
        await db.update_user(user_id, {"money": new_money})
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_money}")

    # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥
    async def setrank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        rank = context.args[1]
        await db.update_user(user_id, {"rank": rank})
        await update.message.reply_text(f"–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {rank}.")

    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def userstats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        user_id = int(context.args[0])
        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await update.message.reply_text(str(user))

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.is_admin(update.effective_user.id):
            return
        total = len(await db.get_all_users())
        banned = sum(1 for u in await db.get_all_users() if u.get("banned"))
        total_money = sum(u["money"] for u in await db.get_all_users())
        await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ó–∞–±–∞–Ω–µ–Ω–æ: {banned}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_money}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ú–∞—Ñ–∏–æ–∑–Ω–æ–µ –ö–∞–∑–∏–Ω–æ...")
        self.application.run_polling()
    
if __name__ == "__main__":
    bot = MafiaCasinoBot()
    bot.run() 
