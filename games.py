"""
–ú–æ–¥—É–ª—å —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –∫–∞–∑–∏–Ω–æ
–†–µ–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ—Ç—ã, —Ä—É–ª–µ—Ç–∫—É, –±–ª—ç–∫–¥–∂–µ–∫, –∫–æ—Å—Ç–∏ –∏ –ø–æ–∫–µ—Ä
"""

import random
from typing import Dict, List, Tuple, Optional
from datetime import datetime
import logging
from config import SLOT_SYMBOLS

logger = logging.getLogger(__name__)

class CasinoGames:
    def __init__(self):
        self.deck = []
        self.reset_deck()
    
    def reset_deck(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
        suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        self.deck = [f"{rank}{suit}" for suit in suits for rank in ranks]
        random.shuffle(self.deck)
    
    def play_slots(self, bet: int) -> Dict:
        """
        –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤—ã–∏–≥—Ä—ã—à–µ–º –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
        """
        if bet <= 0:
            return {"success": False, "message": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Å–∏–º–≤–æ–ª–∞
        symbols = list(SLOT_SYMBOLS.keys())
        result = [random.choice(symbols) for _ in range(3)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        win_multiplier = 0
        win_message = ""
        
        # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
        if len(set(result)) == 1:
            symbol = result[0]
            win_multiplier = SLOT_SYMBOLS[symbol]
            win_message = f"üéâ –î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ {symbol} - x{win_multiplier}!"
        
        # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
        elif len(set(result)) == 2:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã
            for symbol in set(result):
                if result.count(symbol) == 2:
                    win_multiplier = SLOT_SYMBOLS[symbol] // 2
                    win_message = f"üéØ –î–≤–∞ {symbol} - x{win_multiplier}!"
                    break
        
        # –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
        else:
            win_message = "üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        
        win_amount = bet * win_multiplier
        
        return {
            "success": True,
            "result": result,
            "win_amount": win_amount,
            "win_multiplier": win_multiplier,
            "message": win_message,
            "bet": bet
        }
    
    def play_roulette(self, bet_type: str, bet_value: str, bet_amount: int) -> Dict:
        """
        –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É
        bet_type: "color", "number", "even_odd"
        """
        if bet_amount <= 0:
            return {"success": False, "message": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36
        number = random.randint(0, 36)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —á–∏—Å–ª–∞
        if number == 0:
            color = "–∑–µ–ª–µ–Ω—ã–π"
        elif number in [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]:
            color = "–∫—Ä–∞—Å–Ω—ã–π"
        else:
            color = "—á–µ—Ä–Ω—ã–π"
        
        win_amount = 0
        win_message = ""
        
        if bet_type == "color":
            if bet_value == color:
                win_amount = bet_amount * 2
                win_message = f"üéâ –í—ã–∏–≥—Ä—ã—à! {color.capitalize()} - x2!"
            else:
                win_message = f"üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ! –í—ã–ø–∞–ª {color}"
        
        elif bet_type == "number":
            if str(number) == bet_value:
                win_amount = bet_amount * 35
                win_message = f"üéâ –î–ñ–ï–ö–ü–û–¢! –ß–∏—Å–ª–æ {number} - x35!"
            else:
                win_message = f"üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ! –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}"
        
        elif bet_type == "even_odd":
            if number == 0:
                win_message = "üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ! –í—ã–ø–∞–ª 0"
            elif (number % 2 == 0 and bet_value == "—á–µ—Ç–Ω–æ–µ") or (number % 2 == 1 and bet_value == "–Ω–µ—á–µ—Ç–Ω–æ–µ"):
                win_amount = bet_amount * 2
                win_message = f"üéâ –í—ã–∏–≥—Ä—ã—à! {bet_value.capitalize()} - x2!"
            else:
                win_message = f"üòî –ù–µ –ø–æ–≤–µ–∑–ª–æ! –í—ã–ø–∞–ª–æ {'—á–µ—Ç–Ω–æ–µ' if number % 2 == 0 else '–Ω–µ—á–µ—Ç–Ω–æ–µ'} —á–∏—Å–ª–æ"
        
        return {
            "success": True,
            "number": number,
            "color": color,
            "win_amount": win_amount,
            "message": win_message,
            "bet": bet_amount
        }
    
    def play_blackjack(self, bet: int) -> Dict:
        """
        –ò–≥—Ä–∞ –≤ –±–ª—ç–∫–¥–∂–µ–∫
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –∏ –¥–∏–ª–µ—Ä–∞
        """
        if bet <= 0:
            return {"success": False, "message": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}
        
        self.reset_deck()
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        player_cards = [self.deck.pop(), self.deck.pop()]
        dealer_cards = [self.deck.pop(), self.deck.pop()]
        
        # –°–∫—Ä—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
        dealer_visible = [dealer_cards[0], "üÇ†"]
        
        return {
            "success": True,
            "player_cards": player_cards,
            "dealer_cards": dealer_cards,
            "dealer_visible": dealer_visible,
            "bet": bet,
            "game_state": "playing"
        }
    
    def blackjack_hit(self, player_cards: List[str], dealer_cards: List[str], bet: int) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ"""
        if len(self.deck) == 0:
            self.reset_deck()
        
        player_cards.append(self.deck.pop())
        player_score = self.calculate_blackjack_score(player_cards)
        
        if player_score > 21:
            return {
                "success": True,
                "player_cards": player_cards,
                "dealer_cards": dealer_cards,
                "win_amount": 0,
                "message": f"üí• –ü–µ—Ä–µ–±–æ—Ä! –í–∞—à —Å—á–µ—Ç: {player_score}",
                "game_state": "bust"
            }
        
        return {
            "success": True,
            "player_cards": player_cards,
            "dealer_cards": dealer_cards,
            "game_state": "playing"
        }
    
    def blackjack_stand(self, player_cards: List[str], dealer_cards: List[str], bet: int) -> Dict:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ"""
        player_score = self.calculate_blackjack_score(player_cards)
        
        # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17 –∏–ª–∏ –±–æ–ª—å—à–µ
        while self.calculate_blackjack_score(dealer_cards) < 17:
            if len(self.deck) == 0:
                self.reset_deck()
            dealer_cards.append(self.deck.pop())
        
        dealer_score = self.calculate_blackjack_score(dealer_cards)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if dealer_score > 21:
            win_amount = bet * 2
            message = f"üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç"
        elif player_score > dealer_score:
            win_amount = bet * 2
            message = f"üéâ –í—ã–∏–≥—Ä—ã—à! {player_score} vs {dealer_score}"
        elif player_score < dealer_score:
            win_amount = 0
            message = f"üòî –ü—Ä–æ–∏–≥—Ä—ã—à! {player_score} vs {dealer_score}"
        else:
            win_amount = bet  # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏
            message = f"ü§ù –ù–∏—á—å—è! {player_score} vs {dealer_score}"
        
        return {
            "success": True,
            "player_cards": player_cards,
            "dealer_cards": dealer_cards,
            "win_amount": win_amount,
            "message": message,
            "game_state": "finished"
        }
    
    def calculate_blackjack_score(self, cards: List[str]) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—á–µ—Ç –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ"""
        score = 0
        aces = 0
        
        for card in cards:
            if card == "üÇ†":  # –°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
                continue
            
            rank = card[:-1]  # –£–±–∏—Ä–∞–µ–º –º–∞—Å—Ç—å
            
            if rank in ['J', 'Q', 'K']:
                score += 10
            elif rank == 'A':
                aces += 1
            else:
                score += int(rank)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–∑—ã
        for _ in range(aces):
            if score + 11 <= 21:
                score += 11
            else:
                score += 1
        
        return score
    
    def play_dice(self, bet: int, prediction: int) -> Dict:
        """
        –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
        prediction: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ (2-12)
        """
        if bet <= 0:
            return {"success": False, "message": "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}
        
        if prediction < 2 or prediction > 12:
            return {"success": False, "message": "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 12"}
        
        # –ë—Ä–æ—Å–∞–µ–º –¥–≤–∞ –∫—É–±–∏–∫–∞
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        total = dice1 + dice2
        
        if total == prediction:
            # –í—ã–∏–≥—Ä—ã—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            if prediction in [2, 12]:
                win_amount = bet * 30  # 1/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            elif prediction in [3, 11]:
                win_amount = bet * 15  # 2/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            elif prediction in [4, 10]:
                win_amount = bet * 10  # 3/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            elif prediction in [5, 9]:
                win_amount = bet * 7   # 4/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            elif prediction in [6, 8]:
                win_amount = bet * 6   # 5/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            else:  # 7
                win_amount = bet * 5   # 6/36 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            
            message = f"üéâ –£–≥–∞–¥–∞–ª–∏! {dice1} + {dice2} = {total} - x{win_amount//bet}!"
        else:
            win_amount = 0
            message = f"üòî –ù–µ —É–≥–∞–¥–∞–ª–∏! {dice1} + {dice2} = {total}"
        
        return {
            "success": True,
            "dice": [dice1, dice2],
            "total": total,
            "prediction": prediction,
            "win_amount": win_amount,
            "message": message,
            "bet": bet
        }
    
    def play_poker(self, players: List[int], bets: Dict[int, int]) -> Dict:
        """
        –ò–≥—Ä–∞ –≤ –ø–æ–∫–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        players: —Å–ø–∏—Å–æ–∫ ID –∏–≥—Ä–æ–∫–æ–≤
        bets: —Å–ª–æ–≤–∞—Ä—å —Å —Å—Ç–∞–≤–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        """
        if len(players) < 2:
            return {"success": False, "message": "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞"}
        
        self.reset_deck()
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        player_hands = {}
        for player_id in players:
            player_hands[player_id] = [self.deck.pop(), self.deck.pop()]
        
        # –û–±—â–∏–µ –∫–∞—Ä—Ç—ã (—Ñ–ª–æ–ø)
        community_cards = [self.deck.pop(), self.deck.pop(), self.deck.pop()]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–ª—É —Ä—É–∫
        hand_strengths = {}
        for player_id, hand in player_hands.items():
            strength = self.calculate_poker_hand_strength(hand + community_cards)
            hand_strengths[player_id] = strength
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_id = max(hand_strengths, key=hand_strengths.get)
        total_pot = sum(bets.values())
        
        return {
            "success": True,
            "player_hands": player_hands,
            "community_cards": community_cards,
            "hand_strengths": hand_strengths,
            "winner_id": winner_id,
            "total_pot": total_pot,
            "message": f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –∏–≥—Ä–æ–∫ {winner_id} —Å —Ä—É–∫–æ–π {hand_strengths[winner_id]}"
        }
    
    def calculate_poker_hand_strength(self, cards: List[str]) -> int:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–∏–ª—ã –ø–æ–∫–µ—Ä–Ω–æ–π —Ä—É–∫–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã —Ä—É–∫–∏
        """
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã
        ranks = [card[:-1] for card in cards]
        rank_counts = {}
        
        for rank in ranks:
            rank_counts[rank] = rank_counts.get(rank, 0) + 1
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç
        max_count = max(rank_counts.values()) if rank_counts else 0
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Ä—É–∫–∏
        if max_count == 4:
            return 8  # –ö–∞—Ä–µ
        elif max_count == 3:
            return 4  # –¢—Ä–æ–π–∫–∞
        elif max_count == 2:
            pairs = sum(1 for count in rank_counts.values() if count == 2)
            return 3 if pairs == 2 else 2  # –î–≤–µ –ø–∞—Ä—ã –∏–ª–∏ –ø–∞—Ä–∞
        else:
            return 1  # –°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä
casino_games = CasinoGames() 