"""
–ú–æ–¥—É–ª—å –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è, —Ç—é—Ä—å–º—É, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ –±–∞–Ω–¥—ã
"""

import random
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import logging
from config import CRIMES, TERRITORIES, COOLDOWNS

logger = logging.getLogger(__name__)

class CrimeSystem:
    def __init__(self):
        self.active_escapes = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–±–µ–≥–∞
    
    def commit_crime(self, user_id: int, crime_type: str, user_data: Dict) -> Dict:
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º
        """
        if crime_type not in CRIMES:
            return {"success": False, "message": "‘±’∂’∞’°’µ’ø ’∞’°’∂÷Å’°’£’∏÷Ä’Æ’∏÷Ç’©’µ’∏÷Ç’∂"}
        
        crime_info = CRIMES[crime_type]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if user_data["money"] < crime_info["min_money"]:
            return {
                "success": False, 
                "message": f"’ä’•’ø÷Ñ ’ß ’∂’æ’°’¶’°’£’∏÷Ç’µ’∂’® {crime_info['min_money']} ’¥’•’ø’°’≤’°’§÷Ä’°’¥ {crime_type}-’´ ’∞’°’¥’°÷Ä"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if user_data.get("last_crime_time"):
            last_crime = datetime.fromisoformat(user_data["last_crime_time"])
            if datetime.now() - last_crime < timedelta(seconds=COOLDOWNS["crime"]):
                remaining = COOLDOWNS["crime"] - (datetime.now() - last_crime).seconds
                return {
                    "success": False,
                    "message": f"’ç’∫’°’Ω’•÷Ñ {remaining} ’æ’°’µ÷Ä’Ø’µ’°’∂ ’∞’°’ª’∏÷Ä’§ ’∞’°’∂÷Å’°’£’∏÷Ä’Æ’∏÷Ç’©’µ’∏÷Ç’∂’´÷Å ’°’º’°’ª"
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ç—é—Ä—å–º–µ –ª–∏ –∏–≥—Ä–æ–∫
        if user_data.get("jail_time"):
            jail_end = datetime.fromisoformat(user_data["jail_time"])
            if jail_end > datetime.now():
                return {"success": False, "message": "‘¥’∏÷Ç÷Ñ ’¢’°’∂’ø’∏÷Ç’¥ ’•÷Ñ! ’ç’∫’°’Ω’•÷Ñ ’°’¶’°’ø ’°÷Ä’±’°’Ø’¥’°’∂’®"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        success = random.random() < crime_info["success_rate"]
        
        if success:
            # –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            reward = random.randint(*crime_info["reward"])
            new_money = user_data["money"] + reward
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
            new_reputation = user_data["reputation"].copy()
            for faction, change in crime_info["reputation_change"].items():
                new_reputation[faction] += change
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = user_data["statistics"].copy()
            new_stats["crimes_committed"] += 1
            new_stats["crimes_successful"] += 1
            new_stats["money_earned"] += reward
            
            return {
                "success": True,
                "crime_success": True,
                "reward": reward,
                "new_money": new_money,
                "reputation_changes": crime_info["reputation_change"],
                "new_reputation": new_reputation,
                "new_stats": new_stats,
                "message": f"‚úÖ ’Ä’°’ª’∏’≤ {crime_type}! +{reward} ’¥’•’ø’°’≤’°’§÷Ä’°’¥"
            }
        else:
            # –ù–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ - —Ç—é—Ä—å–º–∞
            jail_time = crime_info["jail_time"]
            jail_end = datetime.now() + timedelta(seconds=jail_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–º–µ–Ω—å—à–µ, —á–µ–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
            new_reputation = user_data["reputation"].copy()
            for faction, change in crime_info["reputation_change"].items():
                new_reputation[faction] += change // 2  # –ú–µ–Ω—å—à–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = user_data["statistics"].copy()
            new_stats["crimes_committed"] += 1
            
            return {
                "success": True,
                "crime_success": False,
                "jail_time": jail_end.isoformat(),
                "reputation_changes": {k: v // 2 for k, v in crime_info["reputation_change"].items()},
                "new_reputation": new_reputation,
                "new_stats": new_stats,
                "message": f"üöî ‘≤’º’∂’æ’•÷Å’´’∂! {crime_type} ’π’∞’°’ª’∏’≤’æ’•÷Å: ‘≤’°’∂’ø {jail_time//60} ÷Ä’∏’∫’•"
            }
    
    def organize_escape(self, user_id: int, user_data: Dict) -> Dict:
        """
        –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø–æ–±–µ–≥ –∏–∑ —Ç—é—Ä—å–º—ã
        """
        if not user_data.get("jail_time"):
            return {"success": False, "message": "‘¥’∏÷Ç÷Ñ ’¢’°’∂’ø’∏÷Ç’¥ ’π’•÷Ñ"}
        
        jail_end = datetime.fromisoformat(user_data["jail_time"])
        if jail_end <= datetime.now():
            return {"success": False, "message": "‘¥’∏÷Ç÷Ñ ’¢’°’∂’ø’∏÷Ç’¥ ’π’•÷Ñ"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–±–µ–∂–∞—Ç—å
        if user_id in self.active_escapes:
            return {"success": False, "message": "’ì’°’≠’∏÷Ç’Ω’ø’® ’°÷Ä’§’•’∂ ’Ø’°’¶’¥’°’Ø’•÷Ä’∫’æ’°’Æ ’ß"}
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–±–µ–≥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        remaining_time = (jail_end - datetime.now()).total_seconds()
        escape_cost = max(100, int(remaining_time // 10))
        
        if user_data["money"] < escape_cost:
            return {
                "success": False,
                "message": f"’ä’•’ø÷Ñ ’ß {escape_cost} ’¥’•’ø’°’≤’°’§÷Ä’°’¥ ÷É’°’≠’∏÷Ç’Ω’ø ’Ø’°’¶’¥’°’Ø’•÷Ä’∫’•’¨’∏÷Ç ’∞’°’¥’°÷Ä"
            }
        
        # –®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–±–µ–≥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–≤—è–∑–µ–π —Å –∫–æ–ø–∞–º–∏
        cop_connections = user_data["reputation"].get("–∫–æ–ø—ã", 0)
        escape_chance = min(0.8, 0.3 + (cop_connections * 0.02))
        
        success = random.random() < escape_chance
        
        if success:
            # –£—Å–ø–µ—à–Ω—ã–π –ø–æ–±–µ–≥
            new_money = user_data["money"] - escape_cost
            
            return {
                "success": True,
                "escape_success": True,
                "cost": escape_cost,
                "new_money": new_money,
                "message": f"üèÉ‚Äç‚ôÇÔ∏è ’ì’°’≠’∏÷Ç’Ω’ø’® ’∞’°’ª’∏’≤’æ’•÷Å! ‘æ’°’≠’Ω’æ’°’Æ {escape_cost} ’¥’•’ø’°’≤’°’§÷Ä’°’¥"
            }
        else:
            # –ù–µ—É–¥–∞—á–Ω—ã–π –ø–æ–±–µ–≥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫
            additional_time = int(remaining_time // 2)
            new_jail_end = jail_end + timedelta(seconds=additional_time)
            
            return {
                "success": True,
                "escape_success": False,
                "cost": escape_cost,
                "new_jail_time": new_jail_end.isoformat(),
                "message": f"üöî ’ì’°’≠’∏÷Ç’Ω’ø’® ’π’∞’°’ª’∏’≤’æ’•÷Å! ‘∫’°’¥’Ø’•’ø’® ’•÷Ä’Ø’°÷Ä’°÷Å’æ’•÷Å {additional_time//60} ÷Ä’∏’∫’•’∏’æ"
            }
    
    def buy_territory(self, user_id: int, territory_name: str, user_data: Dict) -> Dict:
        """
        –ü–æ–∫—É–ø–∞–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
        """
        if territory_name not in TERRITORIES:
            return {"success": False, "message": "‘±’∂’∞’°’µ’ø ’ø’°÷Ä’°’Æ÷Ñ"}
        
        territory_info = TERRITORIES[territory_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è
        if territory_name in user_data["territories"]:
            return {"success": False, "message": "‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’ø’°÷Ä’°’Æ÷Ñ’®"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏
        if user_data["money"] < territory_info["cost"]:
            return {
                "success": False,
                "message": f"’ä’•’ø÷Ñ ’ß {territory_info['cost']} ’¥’•’ø’°’≤’°’§÷Ä’°’¥ {territory_name} ’£’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä"
            }
        
        # –ü–æ–∫—É–ø–∞–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
        new_money = user_data["money"] - territory_info["cost"]
        new_territories = user_data["territories"] + [territory_name]
        
        return {
            "success": True,
            "territory_name": territory_name,
            "cost": territory_info["cost"],
            "income": territory_info["income"],
            "new_money": new_money,
            "new_territories": new_territories,
            "message": f"üèòÔ∏è ‘≥’∂’æ’°’Æ ’ø’°÷Ä’°’Æ÷Ñ {territory_name}! ‘µ’Ø’°’¥’∏÷Ç’ø: {territory_info['income']} ’¥’•’ø’°’≤’°’§÷Ä’°’¥/’™’°’¥"
        }
    
    def collect_territory_income(self, user_id: int, user_data: Dict) -> Dict:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–æ—Ö–æ–¥ —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
        """
        if not user_data["territories"]:
            return {"success": False, "message": "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if user_data.get("last_territory_income"):
            last_income = datetime.fromisoformat(user_data["last_territory_income"])
            if datetime.now() - last_income < timedelta(seconds=COOLDOWNS["territory_income"]):
                remaining = COOLDOWNS["territory_income"] - (datetime.now() - last_income).seconds
                return {
                    "success": False,
                    "message": f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining//60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–±–æ—Ä–æ–º"
                }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
        total_income = 0
        territory_incomes = {}
        
        for territory_name in user_data["territories"]:
            if territory_name in TERRITORIES:
                income = TERRITORIES[territory_name]["income"]
                risk = TERRITORIES[territory_name]["risk"]
                
                # –ï—Å—Ç—å —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
                if random.random() < risk:
                    # –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞
                    new_territories = [t for t in user_data["territories"] if t != territory_name]
                    return {
                        "success": True,
                        "territory_lost": territory_name,
                        "new_territories": new_territories,
                        "message": f"üí• –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è {territory_name} –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏!"
                    }
                else:
                    total_income += income
                    territory_incomes[territory_name] = income
        
        new_money = user_data["money"] + total_income
        
        return {
            "success": True,
            "total_income": total_income,
            "territory_incomes": territory_incomes,
            "new_money": new_money,
            "message": f"üí∞ –°–æ–±—Ä–∞–Ω –¥–æ—Ö–æ–¥: +{total_income} –º–æ–Ω–µ—Ç"
        }
    
    def attack_territory(self, attacker_id: int, target_id: int, attacker_data: Dict, target_data: Dict) -> Dict:
        """
        –ê—Ç–∞–∫—É–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        """
        if not target_data["territories"]:
            return {"success": False, "message": "–£ —Ü–µ–ª–∏ –Ω–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞"}
        
        if not attacker_data["territories"]:
            return {"success": False, "message": "–£ –≤–∞—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—Ç–∞–∫–∏"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ç—é—Ä—å–º–µ –ª–∏ –∞—Ç–∞–∫—É—é—â–∏–π
        if attacker_data["jail_time"] > 0:
            return {"success": False, "message": "–í—ã –≤ —Ç—é—Ä—å–º–µ! –ù–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å"}
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é —Ü–µ–ª–∏
        target_territory = random.choice(target_data["territories"])
        
        # –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –º–∞—Ñ–∏–∏
        attacker_mafia_rep = attacker_data["reputation"].get("–º–∞—Ñ–∏—è", 0)
        target_mafia_rep = target_data["reputation"].get("–º–∞—Ñ–∏—è", 0)
        
        success_chance = 0.3 + (attacker_mafia_rep - target_mafia_rep) * 0.01
        success_chance = max(0.1, min(0.9, success_chance))
        
        success = random.random() < success_chance
        
        if success:
            # –£—Å–ø–µ—à–Ω–∞—è –∞—Ç–∞–∫–∞
            new_attacker_territories = attacker_data["territories"] + [target_territory]
            new_target_territories = [t for t in target_data["territories"] if t != target_territory]
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
            attacker_rep = attacker_data["reputation"].copy()
            attacker_rep["–º–∞—Ñ–∏—è"] += 5
            attacker_rep["–≥—Ä–∞–∂–¥–∞–Ω–µ"] -= 3
            
            target_rep = target_data["reputation"].copy()
            target_rep["–º–∞—Ñ–∏—è"] -= 2
            
            return {
                "success": True,
                "attack_success": True,
                "territory": target_territory,
                "new_attacker_territories": new_attacker_territories,
                "new_target_territories": new_target_territories,
                "attacker_rep_changes": {"–º–∞—Ñ–∏—è": 5, "–≥—Ä–∞–∂–¥–∞–Ω–µ": -3},
                "target_rep_changes": {"–º–∞—Ñ–∏—è": -2},
                "new_attacker_rep": attacker_rep,
                "new_target_rep": target_rep,
                "message": f"‚öîÔ∏è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è {target_territory} –∑–∞—Ö–≤–∞—á–µ–Ω–∞!"
            }
        else:
            # –ù–µ—É–¥–∞—á–Ω–∞—è –∞—Ç–∞–∫–∞
            attacker_rep = attacker_data["reputation"].copy()
            attacker_rep["–º–∞—Ñ–∏—è"] -= 3
            attacker_rep["–∫–æ–ø—ã"] -= 2
            
            return {
                "success": True,
                "attack_success": False,
                "attacker_rep_changes": {"–º–∞—Ñ–∏—è": -3, "–∫–æ–ø—ã": -2},
                "new_attacker_rep": attacker_rep,
                "message": f"üí• –ê—Ç–∞–∫–∞ –Ω–∞ {target_territory} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!"
            }
    
    def get_available_crimes(self, user_data: Dict) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
        available = []
        
        for crime_name, crime_info in CRIMES.items():
            if user_data["money"] >= crime_info["min_money"]:
                available.append({
                    "name": crime_name,
                    "success_rate": crime_info["success_rate"],
                    "reward_range": crime_info["reward"],
                    "jail_time": crime_info["jail_time"],
                    "reputation_changes": crime_info["reputation_change"]
                })
        
        return available
    
    def get_available_territories(self, user_data: Dict) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"""
        available = []
        
        for territory_name, territory_info in TERRITORIES.items():
            if territory_name not in user_data["territories"]:
                available.append({
                    "name": territory_name,
                    "cost": territory_info["cost"],
                    "income": territory_info["income"],
                    "risk": territory_info["risk"]
                })
        
        return available

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
crime_system = CrimeSystem() 